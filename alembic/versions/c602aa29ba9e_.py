"""empty message

Revision ID: c602aa29ba9e
Revises: 99d5a53eb214
Create Date: 2022-08-16 11:26:22.910531

"""
import json
import uuid
from pathlib import Path

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "c602aa29ba9e"
down_revision = "99d5a53eb214"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    life_cycle_stage_table = op.create_table(
        "lifecyclestage",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("category", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("phase", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_lifecyclestage_id"), "lifecyclestage", ["id"], unique=False)
    op.create_index(op.f("ix_lifecyclestage_name"), "lifecyclestage", ["name"], unique=False)
    op.drop_index("ix_projectcontributor_id", table_name="projectcontributor")
    op.drop_index("ix_projectcontributor_name", table_name="projectcontributor")
    op.drop_table("projectcontributor")
    op.add_column(
        "project",
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column("project", sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column(
        "project",
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.alter_column("project", "project_id", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("project", "client", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("project", "domain", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_index("ix_project_project_id", table_name="project")
    op.drop_column("projectgroup", "representative_id")
    op.alter_column("projectmember", "project_id", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_constraint("projectmember_project_foreign_id_fkey", "projectmember", type_="foreignkey")
    op.create_foreign_key("project_member_link", "projectmember", "project", ["project_id"], ["id"])
    op.drop_column("projectmember", "project_foreign_id")
    op.add_column(
        "projectstage",
        sa.Column("stage_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.drop_index("ix_projectstage_id", table_name="projectstage")
    op.drop_index("ix_projectstage_name", table_name="projectstage")
    op.create_foreign_key("stage_lifecycle_link", "projectstage", "lifecyclestage", ["stage_id"], ["id"])
    op.drop_column("projectstage", "lifecycle_phase")
    op.drop_column("projectstage", "id")
    op.drop_column("projectstage", "name")
    op.drop_column("projectstage", "stage")

    alembic_path = Path(__file__).parent.parent.resolve()
    data = json.loads((alembic_path / "initial_data" / "life_cycle_stages.json").read_text())
    for stage in data:
        stage.update({"id": str(uuid.uuid4())})
    op.bulk_insert(life_cycle_stage_table, data)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "projectstage",
        sa.Column("stage", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "projectstage",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "projectstage",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "projectstage",
        sa.Column("lifecycle_phase", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint("stage_lifecycle_link", "projectstage", type_="foreignkey")
    op.create_index("ix_projectstage_name", "projectstage", ["name"], unique=False)
    op.create_index("ix_projectstage_id", "projectstage", ["id"], unique=False)
    op.alter_column("projectstage", "project_id", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("projectstage", "stage_id")
    op.add_column(
        "projectmember",
        sa.Column("project_foreign_id", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint("project_member_link", "projectmember", type_="foreignkey")
    op.create_foreign_key(
        "projectmember_project_foreign_id_fkey",
        "projectmember",
        "project",
        ["project_foreign_id"],
        ["id"],
    )
    op.alter_column("projectmember", "project_id", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("projectmember", "id", existing_type=sa.VARCHAR(), nullable=False)
    op.add_column(
        "projectgroup",
        sa.Column("representative_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.alter_column("projectgroup", "project_id", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("projectgroup", "id", existing_type=sa.VARCHAR(), nullable=False)
    op.create_index("ix_project_project_id", "project", ["project_id"], unique=False)
    op.alter_column("project", "domain", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("project", "client", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("project", "project_id", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("project", "id", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("project", "country")
    op.drop_column("project", "city")
    op.drop_column("project", "address")
    op.alter_column("member", "id", existing_type=sa.VARCHAR(), nullable=False)
    op.create_table(
        "projectcontributor",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("project_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="projectcontributor_project_id_fkey"),
        sa.PrimaryKeyConstraint("id", "project_id", name="projectcontributor_pkey"),
    )
    op.create_index("ix_projectcontributor_name", "projectcontributor", ["name"], unique=False)
    op.create_index("ix_projectcontributor_id", "projectcontributor", ["id"], unique=False)
    op.drop_index(op.f("ix_lifecyclestage_name"), table_name="lifecyclestage")
    op.drop_index(op.f("ix_lifecyclestage_id"), table_name="lifecyclestage")
    op.drop_table("lifecyclestage")
    # ### end Alembic commands ###
