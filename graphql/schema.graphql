directive @keys(fields: String!) on OBJECT

schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable"]) {
  query: Query
  mutation: Mutation
}

"""Date (isoformat)"""
scalar Date

input FilterOptions {
  equal: String = null
  contains: String = null
  startsWith: String = null
  endsWith: String = null
  isEmpty: Boolean = null
  isNotEmpty: Boolean = null
  isAnyOf: [String!] = null
}

type GraphQLComment @key(fields: "id") {
  id: ID!
  author: GraphQLProjectMember
  authorId: String! @shareable
}

type GraphQLLifeCycleStage {
  id: String!
  name: String!
  category: String!
  phase: String!
}

type GraphQLProject @keys(fields: "project_id") {
  id: String!
  projectId: ID
  name: String!
  client: String
  domain: ProjectDomain
  address: String
  city: String
  country: String
  imageUrl: String
  metaFields: JSON
  groups: [GraphQLProjectGroup!]
  stages: [GraphQLProjectStage!]
  members: [GraphQLProjectMember!]
}

type GraphQLProjectGroup @key(fields: "id") {
  id: ID!
  name: String!
  leadId: String
  lead: GraphQLProjectMember
  members: [GraphQLProjectMember!]
  projectId: String!
}

type GraphQLProjectMember @key(fields: "id") {
  id: ID!
  userId: String! @shareable
  name: String!
  email: String! @shareable
  company: String
  lastLogin: Date
  leaderOf: [GraphQLProjectGroup!]
  projectGroups: [GraphQLProjectGroup!]
  projectId: ID!
}

union GraphQLProjectMemberGraphQLProjectGroup = GraphQLProjectMember | GraphQLProjectGroup

type GraphQLProjectSource @key(fields: "id") {
  id: ID!
  projectId: String! @shareable
  author: GraphQLProjectMember!
  authorId: String! @shareable
}

type GraphQLProjectStage {
  stageId: String!
  projectId: String!
  name: String!
  category: String!
  phase: String!
}

type GraphQLTask @key(fields: "id") {
  id: ID!
  author: GraphQLProjectMember!
  authorId: String! @shareable
  assignee: GraphQLProjectMemberGraphQLProjectGroup!
  assigneeId: String @shareable
  assignedGroupId: String @shareable
  reportingSchemaId: String! @shareable
}

type GraphQLUserAccount {
  id: String!
  tenantId: String!
  name: String!
  roles: [String!]!
  email: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Add a Project"""
  addProject(name: String!, projectId: String = null, client: String = null, domain: ProjectDomain = null, file: String = null, members: [ProjectMemberInput!] = null, groups: [ProjectGroupInput!] = null, stages: [ProjectStageInput!] = null, metaFields: JSON = null): GraphQLProject!

  """Update a Project"""
  updateProject(id: String!, projectId: String = null, name: String = null, address: String = null, city: String = null, country: String = null, client: String = null, domain: ProjectDomain = null, file: String = null, metaFields: JSON = null): GraphQLProject!

  """Delete a project"""
  deleteProject(id: String!): String!

  """Add a Project Member"""
  addProjectMember(name: String!, email: String!, projectId: String!, projectGroupIds: [String!]!): GraphQLProjectMember!

  """Delete a Project Member"""
  deleteProjectMember(id: String!): String!

  """Add a life cycle stage to a project"""
  addProjectStage(projectId: String!, stageId: String!): GraphQLProjectStage!

  """Remove a life cycle stage from a project"""
  deleteProjectStage(projectId: String!, stageId: String!): String!

  """Add a Project Group"""
  addProjectGroup(projectId: String!, name: String!, leadId: String = null): GraphQLProjectGroup!

  """Update a Project Group"""
  updateProjectGroup(id: String!, name: String = null, leadId: String = null): GraphQLProjectGroup!

  """Delete a project group"""
  deleteProjectGroup(id: String!): String!

  """Add Project Members to an existing Project Group"""
  addProjectMembersToGroup(groupId: String!, memberIds: [String!]!): GraphQLProjectGroup!

  """Remove Project Members from an existing Project Group"""
  removeProjectMembersFromGroup(groupId: String!, memberIds: [String!]!): GraphQLProjectGroup!
}

enum ProjectDomain {
  infrastructure
  energy
  buildings
  tunnels
}

input ProjectFilters {
  name: FilterOptions = null
  projectId: FilterOptions = null
  id: FilterOptions = null
}

input ProjectGroupFilters {
  name: FilterOptions = null
  projectId: FilterOptions = null
  id: FilterOptions = null
}

input ProjectGroupInput {
  id: String!
  name: String!
  leadId: String!
}

input ProjectMemberFilters {
  userId: FilterOptions = null
  projectId: FilterOptions = null
  name: FilterOptions = null
  email: FilterOptions = null
  company: FilterOptions = null
}

input ProjectMemberInput {
  id: String
  email: String!
  name: String!
  company: String!
  lastLogin: Date
}

input ProjectStageInput {
  id: String!
  name: String!
  stage: String!
  lifecyclePhase: String!
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """Get current user"""
  account: GraphQLUserAccount!

  """Query all Projects user has access to"""
  projects(filters: ProjectFilters = null): [GraphQLProject!]!

  """
  Query Project Members using ProjectID.
  Filters can be used to query unique members of the Project
  """
  projectMembers(projectId: String!, filters: ProjectMemberFilters = null): [GraphQLProjectMember!]!

  """Get all life cycle stages"""
  lifeCycleStages: [GraphQLLifeCycleStage!]!

  """Get all life cycle stage associated with a project"""
  projectStages(projectId: String!): [GraphQLProjectStage!]!

  """Query all Project Groups"""
  projectGroups(projectId: String!, filters: ProjectGroupFilters = null): [GraphQLProjectGroup!]!
}

scalar _Any

union _Entity = GraphQLTask | GraphQLProjectSource | GraphQLComment | GraphQLProjectMember | GraphQLProjectGroup

type _Service {
  sdl: String!
}
